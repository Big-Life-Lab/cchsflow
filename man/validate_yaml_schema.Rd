% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/schema-validation.R
\name{validate_yaml_schema}
\alias{validate_yaml_schema}
\title{============================================================================
RECODEFLOW YAML SCHEMA VALIDATION 
============================================================================
Validate YAML Schema Files}
\usage{
validate_yaml_schema(yaml_path)
}
\arguments{
\item{yaml_path}{Path to YAML file to validate}
}
\value{
List with detailed validation results containing:
  \describe{
    \item{file}{Base filename of the validated schema}
    \item{path}{Full path to the schema file}
    \item{valid}{Boolean indicating overall validation success}
    \item{errors}{Character vector of validation errors found}
    \item{warnings}{Character vector of validation warnings}
    \item{patterns_tested}{Number of regex patterns tested}
    \item{patterns_valid}{Number of regex patterns that compiled successfully}
    \item{timestamp}{Validation timestamp}
    \item{regex_engine}{Engine used for pattern validation (stringr/ICU)}
    \item{schema_version}{Schema version if detected (e.g., "1.0.0")}
    \item{message}{Human-readable validation summary message}
  }
  This comprehensive result object enables detailed inspection of validation 
  outcomes and provides all necessary information for debugging schema issues.
}
\description{
Comprehensive validation for recodeflow YAML schemas including syntax and regex patterns.
Validates any recodeflow YAML schema file including variables.yaml, variable_details.yaml,
metadata_registry.yaml, and database_metadata.yaml.
Uses stringr for cross-platform regex consistency (ICU engine)
}
\details{
This function performs comprehensive validation of recodeflow YAML schema files:

**Purpose**: Ensures YAML schema files are syntactically correct and all embedded
regex patterns compile successfully across different platforms and R installations.
Critical for preventing runtime errors in data harmonization workflows.

**What is validated**:
\itemize{
  \item YAML syntax and parseability using yaml::read_yaml()
  \item All regex patterns found in field constraints (pattern field)
  \item Transformation patterns in metadata_registry.yaml shared specifications
  \item Cross-platform regex compatibility using stringr/ICU engine
  \item Schema version detection and reporting
}

**Specific YAML files supported**:
\itemize{
  \item variables.yaml - Harmonized variable definitions and metadata
  \item variable_details.yaml - Value-level transformation rules and recoding logic
  \item metadata_registry.yaml - Central registry with shared transformation patterns
  \item database_metadata.yaml - Dublin Core compliant database metadata
  \item Any recodeflow-compatible YAML schema following the established structure
}
}
\examples{
\dontrun{
# Validate core harmonization schema
result <- validate_yaml_schema("inst/metadata/schemas/core/variables.yaml")
print(result$message)  # "PASS variables.yaml - YAML syntax valid"
cat("Patterns tested:", result$patterns_tested, "Valid:", result$patterns_valid)

# Check for validation errors
if (!result$valid) {
  cat("Errors found:", paste(result$errors, collapse = "; "))
}
}
}
\keyword{internal}

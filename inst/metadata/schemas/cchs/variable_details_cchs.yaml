schema_version: "2.2.0"
schema_date: "2025-01-21"
description: "CCHS-specific metadata for variable details schema"

# ============================================================================
# CCHS-SPECIFIC METADATA FOR VARIABLE DETAILS
# ============================================================================
cchs_metadata:
  title: "CCHS-specific variable details configuration"
  description: "Enhanced metadata for CCHS variable details and recoding patterns"
  version: "2.2.0"
  
  # CCHS-specific field requirements
  field_requirements:
    dummyVariable:
      requirement: "recommended"
      description: "CCHS recommends explicit dummy variable naming for categorical and continuous variable expansions"
      patterns:
        categorical:
          pattern: "{variable}_{type}{numCat}_{value}"
          description: "Standard pattern for categorical variable expansions"
          example: "SMK_09A_B_cat4_1"
        continuous:
          pattern: "{variable}_cont_{recEnd}"
          description: "Pattern for continuous variable mappings from categorical sources"
          example: "SMK_09A_B_cont_05"
          notes: "recEnd value is sanitized (remove special characters, dots become numbers)"
        continuous_na:
          pattern: "{variable}_cont_NA{tag}_{database}_{recStart_identifier}"
          description: "Pattern for continuous variable NA mappings with recStart-specific identifiers"
          examples: 
            - "SMK_09A_B_cont_NAa_cchs2003_p"      # Single recStart value (6, 996)
            - "SMK_09A_B_cont_NAb_cchs2003_p_7"    # [7,9] recStart → _7 suffix
            - "SMK_09A_B_cont_NAb_cchs2003_p_e"    # else recStart → _e suffix
            - "SMKG09C_cont_NAa_cchs2022_i"        # cchs2022_i database
          recStart_identifiers:
            - "No suffix: Single values like 6, 996"
            - "_7: For [7,9] recStart ranges"
            - "_e: For else recStart catch-all"
            - "_997999: For [997,999] recStart ranges"
          naming_rules:
            - "Extract earliest database from databaseStart field"
            - "Add recStart identifier suffix for multiple rules per NA category"
            - "Enables unique identification of different missing value handling rules"
      
  # Comprehensive dummyVariable regex validation patterns
  dummyVariable_validation:
    description: "Regex patterns to validate dummyVariable naming conventions based on actual data analysis"
    patterns:
      categorical:
        regex: "^[A-Z_0-9]+_cat[0-9]+_[0-9]+$"
        description: "Standard categorical pattern: {VARIABLE}_cat{numCat}_{value}"
        examples:
          valid: ["SMK_09A_B_cat4_1", "SMKG09C_cat3_2", "SMKG203_A_cat10_5"]
          invalid: ["smk_09a_b_cat4_1", "SMK_09A_B_cat_1", "SMK_09A_B_cat4_a"]
      
      continuous_categorical_mapping:
        regex: "^[A-Z_0-9]+_cont_[0-9]+$"
        description: "Continuous from categorical: {VARIABLE}_cont_{value}"
        examples:
          valid: ["SMK_09A_B_cont_05", "SMK_09A_B_cont_15", "SMKG09C_cont_4", "SMKG203_A_cont_185"]
          invalid: ["SMK_09A_B_cont_0.5", "smk_09a_b_cont_05", "SMK_09A_B_cont_"]
      
      continuous_copy_cchs2022i:
        regex: "^[A-Z_0-9]+_copy_cont_cchs2022_i$"
        description: "Copy operations for cchs2022_i: {VARIABLE}_copy_cont_cchs2022_i"
        examples:
          valid: ["SMK_09A_B_copy_cont_cchs2022_i", "SMKG09C_copy_cont_cchs2022_i"]
          invalid: ["SMK_09A_B_cont_copy_cchs2022_i", "SMK_09A_B_copy_cont_cchs2022", "smk_09a_b_copy_cont_cchs2022_i"]
      
      continuous_copy_other:
        regex: "^[A-Z_0-9]+_cont_cchs[0-9]{4}(?:_[0-9]{4})?_[ps]_copy$"
        description: "Copy operations for other databases: {VARIABLE}_cont_{database}_copy"
        examples:
          valid: ["SMK_09A_B_cont_cchs2003_p_copy", "SMKG09C_cont_cchs2001_p_copy", "SMKG203_A_cont_cchs2007_2008_p_copy"]
          invalid: ["SMK_09A_B_cont_cchas2003_p_copy", "SMK_09A_B_cont_cchs03_p_copy", "SMK_09A_B_cont_cchs2003_copy"]
      
      continuous_copy_simple:
        regex: "^[A-Z_0-9]+_cont_copy$"
        description: "Simple copy operations: {VARIABLE}_cont_copy"
        examples:
          valid: ["SMKG203_A_cont_copy", "SMKG207_A_cont_copy"]
          invalid: ["smkg203_a_cont_copy", "SMKG203_A_copy", "SMKG203_A_cont_copy_2"]
      
      continuous_na_single:
        regex: "^[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}(?:_[0-9]{4})?_[psi]$"
        description: "NA mappings with single recStart: {VARIABLE}_cont_NA{tag}_{database}"
        examples:
          valid: ["SMK_09A_B_cont_NAa_cchs2003_p", "SMKG09C_cont_NAb_cchs2022_i", "SMKG09C_cont_NAa_cchs2009_s"]
          invalid: ["SMK_09A_B_cont_NA_cchs2003_p", "SMK_09A_B_cont_NAc_cchs2003_p", "smk_09a_b_cont_NAa_cchs2003_p"]
      
      continuous_na_with_identifier:
        regex: "^[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}(?:_[0-9]{4})?_[psi]_[7e]$|^[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}(?:_[0-9]{4})?_[psi]_[0-9]+$"
        description: "NA mappings with recStart identifiers: {VARIABLE}_cont_NA{tag}_{database}_{identifier}"
        examples:
          valid: ["SMK_09A_B_cont_NAb_cchs2003_p_7", "SMK_09A_B_cont_NAb_cchs2003_p_e", "SMKG09C_cont_NAb_cchs2009_s_997999"]
          invalid: ["SMK_09A_B_cont_NAb_cchs2003_p_x", "SMK_09A_B_cont_NAb_cchs2003_p_77", "SMK_09A_B_cont_NAb_cchs2003_p_else"]
      
      # Special case for non-standard database suffix (observed: _d instead of _s)
      continuous_na_nonstandard:
        regex: "^[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}_[a-z]$"
        description: "NA mappings with non-standard database suffix (e.g., _d instead of _s)"
        examples:
          valid: ["SMKG09C_cont_NAb_cchs2009_d"]
          invalid: ["SMKG09C_cont_NAb_cchs2009_"]
    
    # Master regex for all patterns combined
    master_validation:
      regex: "^(?:[A-Z_0-9]+_cat[0-9]+_[0-9]+|[A-Z_0-9]+_cont_[0-9]+|[A-Z_0-9]+_copy_cont_cchs2022_i|[A-Z_0-9]+_cont_cchs[0-9]{4}(?:_[0-9]{4})?_[ps]_copy|[A-Z_0-9]+_cont_copy|[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}(?:_[0-9]{4})?_[psi](?:_[7e]|_[0-9]+)?|[A-Z_0-9]+_cont_NA[ab]_cchs[0-9]{4}_[a-z])$"
      description: "Combined regex matching all valid dummyVariable patterns including edge cases"
      usage: "Use this regex to validate any dummyVariable name against all known patterns"
    
    # Validation functions for implementation
    validation_rules:
      case_sensitivity: "UPPERCASE required for variable names and database identifiers"
      database_format: "cchs{YYYY}_{type} or cchs{YYYY}_{YYYY}_{type} where type is p|s|i"
      na_tags: "Only 'a' and 'b' are valid NA tags (NAa, NAb)"
      recStart_identifiers: "7 for [7,9], e for else, numeric for specific ranges like 997999"
      sequence_numbers: "Positive integers starting from 2 for duplicates"

  # Enhanced NA categories with haven::tagged_na() integration
  na_categories:
    description: "CCHS NA categories integrated with haven::tagged_na() system"
    standard:
      - code: "NA::a"
        description: "Valid skip"
        frequency: "common"
        haven_equivalent: "haven::tagged_na('a')"
        usage_context: "Survey logic skips, conditional questions"
      - code: "NA::b"
        description: "Don't know, refusal, not stated"
        frequency: "common"
        haven_equivalent: "haven::tagged_na('b')"
        usage_context: "Missing responses, refused answers"
    extended:
      - code: "NA::c"
        description: "Not applicable (specific conditions)"
        frequency: "rare"
        haven_equivalent: "haven::tagged_na('c')"
        usage_context: "Condition-specific non-applicability"
      - code: "NA::d"
        description: "Missing (other reasons)"
        frequency: "rare"
        haven_equivalent: "haven::tagged_na('d')"
        usage_context: "Technical missing, data processing issues"

  # CCHS database patterns
  source_databases:
    pattern: "cchs{YEAR}_{TYPE}"
    year_formats:
      - "YYYY"
      - "YYYY_YYYY"
    type_suffixes:
      - code: "p"
        description: "Public Use Microdata File (PUMF)"
      - code: "i" 
        description: "ICES data (continuous variables in master/shared files)"
      - code: "s"
        description: "Shared file (contains variables)"
      - code: "m"
        description: "Master file"

  # CCHS function patterns
  function_patterns:
    description: "Common function patterns used in CCHS recoding"
    examples:
      - pattern: "Func::{variable}_fun"
        description: "Simple transformation function"
        example: "Func::active_transport1_fun"
      - pattern: "Func::{variable}_der_fun{n}"
        description: "Derived variable function with sequence"
        example: "Func::smoking_der_fun2"
      - pattern: "Func::{variable}{operation}_fun"
        description: "Operation-specific function"
        example: "Func::bmi_cat_fun"

  # Missing data preprocessing integration
  missing_data_preprocessing:
    description: "Universal missing data preprocessing for CCHS derived variables"
    string_based_patterns:
      description: "Handle string representations before numeric conversion"
      patterns:
        - 'character "NA" → haven::tagged_na("a")'
        - 'character "99" → haven::tagged_na("b") # if configured as missing'
        - 'character "999" → haven::tagged_na("b") # if configured as missing'
    
    tidyverse_modernization:
      description: "Modern tidyverse patterns for cchsflow v1.0"
      key_improvements:
        - "Replace if_else2() with dplyr::if_else()"
        - "Use dplyr::case_when() instead of nested ifelse() chains"
        - "Implement type-safe expectations using assertthat or checkmate"
        - "Handle mixed input types (character/numeric) consistently"
        
    boundary_logic_integration:
      description: "Research-aligned boundary validation"
      approach:
        - "Apply evidence-based constants for derived variable boundaries"
        - "Implement comprehensive boundary logic validation"
        - "Include research citations for boundary decisions"
        - "Provide clear error messages for out-of-bounds values"

  # Template system enhancements
  template_system_cchs:
    description: "CCHS-specific template system patterns"
    common_templates:
      - name: "language_recoding"
        description: "Standard language variable recoding template"
        usage_frequency: "high"
      - name: "yes_no_categorical"
        description: "Standard yes/no response template"
        usage_frequency: "very high"
      - name: "age_grouping"
        description: "Standard age category templates"
        usage_frequency: "high"

  # ICES integration notes
  ices_integration:
    description: "ICES-specific considerations for variable details"
    continuous_variable_support:
      description: "Enhanced support for continuous variables in _i databases"
      key_features:
        - "Support for decimal precision in recoding ranges"
        - "Enhanced interval notation for complex ranges"
        - "Integration with master/shared file variable patterns"
    
    temporary_fields:
      - name: "ICES confirmation"
        values: ["ICES confirmed", "ICES altered", "ICES specific", ""]
        description: "Temporary validation field for ICES compatibility"
        status: "Under review for future versions"

  # Universal preprocessing implementation notes
  implementation_notes:
    missing_data_approach:
      description: "Consistent missing data handling across all derived functions"
      key_principles:
        - "String-based NA preprocessing before numeric operations"
        - "Preserve existing haven::tagged_na() values"
        - "Convert character missing codes to appropriate tagged_na types"
        - "Maintain backward compatibility with existing functions"
        
    testing_standards:
      description: "Comprehensive testing approach for missing data scenarios"
      test_coverage:
        - "Boundary value testing with missing data"
        - "Mixed input type testing (character/numeric)"
        - "Integration testing through rec_with_table() workflow"
        - "Edge case testing for unusual missing data patterns"